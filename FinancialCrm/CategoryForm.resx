<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        0AAAAABJRU5ErkJggg==
</value>
  </data>
</root>